local ffi  = require "ffi"
local dasm = require "dasm"
local rgph = require "rgph"

-- Compat stuff
if not bit32 then bit32 = bit end
if not bit32 then bit32 = require "bit" end

local _M = {}

|.arch ARCH
|
|.if not X64
| .error invalid arch ARCH
|.endif
|
|.actionlist actions
|.section code, rodata
|.externnames externnames
|.globals globals
|.globalnames globalnames

local function const64(c, add)
	add = add or 0
	return (c[1] + add) + c[2] * 0x100000000ll
end

local function ctz(n, z)
	if n == 0 then return z or 32 end
	local res = 0
	while bit32.band(n, 1) == 0 do
		res = res + 1
		n = bit32.rshift(n, 1)
	end
	return res
end

local function globalsbynames(globals)
	local res = {}
	for i = 0, #globalnames do
		res[globalnames[i]] = globals[i]
	end
	return res
end

-- for k,v,i in index_iter { 3 } do print(k,v,i) end --> 1	nil	3
local function index_iter(keys, v)
	local function iter(t, k)
		local n = next(t, k)
		return n, v, t[n]
	end
	return iter, keys
end

local function build_graph(keys, flags, ntries, seed)
	flags  = flags or ""
	ntries = ntries or 100
	seed   = seed or 0

	local nkeys = rgph.count_keys(index_iter(keys))
	local g = rgph.new_graph(nkeys, flags)

	for i = 1, ntries do
		local ok, err = g:build(flags, seed, index_iter(keys))
		if ok then break end
		assert(not err, err) -- index_iter(keys) can't fail
		seed = seed + 1
	end

	return g
end

-- Returns a number of bits required for storing chm index values.
-- Also returns a min value and a range of index values.
local function chm_index_bits(g)
	local base = g:index_min()
	local range = g:index_max() - base + 1

	if range <= 4 then
		return 2, base, range
	elseif range <= 16 then
		return 4, base, range
	elseif range <= 256 then
		return 8, base, range
	elseif range <= 65536 then
		return 16, base, range
	else
		assert(range <= 0x100000000)
		return 32, base, range
	end
end

-- Call emit_rodata[g:algo()] to emit rdonly lookup table.
local emit_rodata = {}

function emit_rodata.bdz(Dst, g, assignments)
	local nverts = g:vertices()
	local rank = g:rank()
	local bits = rank - 1
	local stop = bit32.rshift(63, bits)

	local w = 0
	for v = 0, nverts - 1 do
		local n = bit32.band(v, stop)
		local a = assignments[v]
		if a == rank then a = 0 end
		a = bit32.lshift(a, n * bits)
		w = bit32.bor(w, a)
		if n == stop then
			| .dword w
			w = 0
		end
	end

	if bit32.band(nverts, stop) ~= 0 then
		-- XXX bit32.lshift(w, ...)
		| .dword w
	end
end

function emit_rodata.chm(Dst, g, assignments, keys)
	local nverts = g:vertices()
	local rank = g:rank()
	local unassigned = g:unassigned()
	local bits, base = chm_index_bits(g)
	local b, stop = 0, 8 / bits - 1 -- when bits < 8

	for v = 0, nverts - 1 do
		local a = assignments[v]
		if a == unassigned then a = base end

		if bits == 32 then
			| .dword a - base
		elseif bits == 16 then
			| .word a - base
		elseif bits == 8 then
			| .byte a - base
		else -- bits < 8
			local n = bit32.band(v, stop)
			b = bit32.bor(bit32.lshift(a - base, bits * n), b)
			if n == stop then
				| .byte b
				b = 0
			end
		end
	end

	if bits < 8 and bit32.band(nverts, stop) ~= 0 then
		| .byte b
	end
end

-- Call emit_hash[g:hash()] to emit hash body.
-- Input value is always in edi. For scalar hashes, output is
-- in ecx/rcx. Emitted code can use rax and rdx for temporaries.
local emit_hash = {}

-- Emit `fn(key) = rgph_u32_xxh32s_u32(key, g:seed())`.
function emit_hash.xxh32s(Dst, g, const)
	local mod = 2^32
	local len = 4

	| imul edi, edi, const.prime3
	| add  edi, (const.prime5 + len + g:seed()) % mod
	| rol  edi, 17
	| imul edi, edi, const.prime4
	| mov  ecx, edi
	| shr  ecx, 15
	| xor  ecx, edi
	| imul eax, ecx, const.prime2
	| mov  ecx, eax
	| shr  ecx, 13
	| xor  ecx, eax
	| imul eax, ecx, const.prime3
	| mov  ecx, eax
	| shr  ecx, 16
	| xor  ecx, eax
end

-- Emit `fn(key) = rgph_u64_xxh64s_u32(key, g:seed())`.
function emit_hash.xxh64s(Dst, g, const)
	local len = 4
	local c1 = const64(const.prime1)
	local c2 = const64(const.prime2)
	local c3 = const64(const.prime3)
	local c5 = const64(const.prime5, len + g:seed())

	| mov   edi, edi
	| mov64 rcx, c1
	| imul  rdi, rcx
	| mov64 rcx, c5
	| xor   rdi, rcx
	| rol   rdi, 23
	| mov64 rcx, c2
	| imul  rdi, rcx
	| mov64 rax, c3
	| lea   rdx, [rdi+rax]
	| mov   rsi, rdx
	| shr   rsi, 33
	| xor   rdx, rsi
	| imul  rdx, rcx
	| mov   rcx, rdx
	| shr   rcx, 29
	| xor   rdx, rcx
	| imul  rdx, rax
	| mov   rcx, rdx
	| shr   rcx, 32
	| xor   rcx, rdx
end

-- Call emit_rem[g:reduction()] to emit remainders.
-- Input register is ecx/rcx. Results are loaded to
-- ecx, edi and (when rank is 3) to esi.
local emit_rem = {}

-- Emit remainders for a scalar hash.
function emit_rem.mul(Dst, g, hash_bits)
	local nverts = g:vertices()
	local rank = g:rank()
	local partsz = nverts / rank
	local rshift = math.floor(hash_bits / rank)
	local mask = rshift == 32 and 0xffffffff or bit32.lshift(1, rshift) - 1

	if rank == 2 then
		| mov rdi, rcx
		if rshift == 16 then
			| movzx ecx, cx
		else
			| mov ecx, ecx
		end
		| shr rdi, rshift
		| imul rcx, rcx, partsz
		| imul rdi, rdi, partsz
		| shr rcx, rshift
		| shr rdi, rshift
		| add rdi, partsz
	else -- rank == 3
		| mov rdi, rcx
		| mov rsi, rcx
		| shr rdi, rshift
		| and rcx, mask
		| and rdi, mask
		| imul rcx, rcx, partsz
		| shr rsi, hash_bits - rshift
		| shr rcx, rshift
		| imul rdi, rdi, partsz
		| imul rsi, rsi, partsz
		| shr rdi, rshift
		| shr rsi, rshift
		| add rdi, partsz
		| add rsi, 2 * partsz
	end
end

-- Call emit_lookup[g:algo()] to emit a lookup.
local emit_lookup = {}

-- XXX gcc 5.3 generates faster code
function emit_lookup.bdz(Dst, g)
	local rank = g:rank()

	| lea r11, [->rodata_start]

	if rank == 3 then
		| mov r10d, esi
		| shr r10d, 7 - rank
		| mov r10d, [r11+r10*4]
	end

	| mov r9d, edi
	| shr r9d, 7 - rank
	| mov r9d, [r11+r9*4]
	|
	| mov r8d, ecx
	| shr r8d, 7 - rank
	| mov r8d, [r11+r8*4]
	|
	| mov eax, ecx

	if rank == 2 then
		| shr r8d, cl -- implicit cl&31
		|
		| mov ecx, edi
		| shr r9d, cl -- implicit cl&31
	else
		| shl ecx, 1
		| shr r8d, cl -- implicit cl&31
		| and r8d, 3
		|
		| lea ecx, [edi*2]
		| shr r9d, cl -- implicit cl&31
		| and r9d, 3
	end

	| add r8d, r9d

	if rank == 2 then
		| shr   r8d, 1 -- shift to CF
		| cmovb eax, edi
	else
		| add r8d, -3
		| adc r8d, -1
		| and r8d, 3
		|
		| mov ecx, esi
		| shl ecx, 1
		| shr r10d, cl -- implicit cl&31
		|
		| and r10d, 3
		| add r8d, r10d
		|
		| add r8d, -3
		| adc r8d, -1
		| and r8d, 3
		|
		| cmovne eax, edi
		| shr    r8d, 2 -- shift to CF
		| cmovb  eax, esi
	end
end

function emit_lookup.chm(Dst, g)
	local nverts = g:vertices()
	local rank = g:rank()
	local bits, base, range = chm_index_bits(g)
	local mask = bits == 32 and 0xffffffff or bit32.lshift(1, bits) - 1
	local pow2 = bit32.band(range, range - 1) == 0

	| lea r10, [->rodata_start]

	if bits == 32 then
		| mov eax, dword [r10+rdi*4]
		| add eax, dword [r10+rcx*4]
	elseif bits == 16 then
		| mov ax, word [r10+rdi*2]
		| add ax, word [r10+rcx*2]
	elseif bits == 8 then
		| mov al, byte [r10+rdi]
		| add al, byte [r10+rcx]
	else -- bits < 8
		local ecxshift = ctz(bits)
		local indexshift = 3 - ecxshift -- to index in rodata_start
		local ecxmask = bit32.lshift(1, indexshift) - 1

		| mov r9d, edi
		| shr r9d, indexshift
		| mov r9b, byte [r10+r9]
		|
		| mov r8d, ecx
		| shr r8d, indexshift
		| mov r8b, byte [r10+r8]
		|
		| and ecx, ecxmask
		| shl ecx, ecxshift
		| shr r8b, cl
		|
		| mov ecx, edi
		| and ecx, ecxmask
		| shl ecx, ecxshift
		| shr r9b, cl

		if not pow2 then
			| and r8d, mask
			| and r9d, mask
		end

		| lea eax, [r9d+r8d]
	end

	if mask ~= 0xffffffff then
		| and eax, mask
	elseif not pow2 then
		| cmp eax, range - 1
		| lea edi, [eax-range]
		| cmovg eax, edi
	end

	if base ~= 0 then
		| add eax, base
	end
end

function _M.generate(keys, flags, ntries, seed)
	local g = build_graph(keys, flags, ntries, seed)

	local hash_bits = g:hash_bits()
	assert(hash_bits <= 64, "vector hashes aren't supported")

	local reduction = g:reduction()
	local emit_rem_fn = assert(emit_rem[reduction], "unsupported reduction")

	local hash = g:hash()
	local emit_hash_fn = assert(emit_hash[hash], "unsupported hash")

	local algo = g:algo()
	local emit_lookup_fn = assert(emit_lookup[algo], "unsupported algo")
	local emit_rodata_fn = assert(emit_rodata[algo], "unsupported algo")

	local Dst, globals =
	    dasm.new(actions, externnames, DASM_MAXSECTION, DASM_MAXGLOBAL)

	| .align 32
	| .code
	|->hash_fn:
	emit_hash_fn(Dst, g, rgph.const[hash])
	emit_rem_fn(Dst, g, hash_bits)
	emit_lookup_fn(Dst, g)
	| ret
	| .align 32

	local assignments = g:assign()
	| .rodata
	| .align 4
	|->rodata_start:
	emit_rodata_fn(Dst, g, assignments, keys)

	local buf, size = Dst:build()
	local hash_fn = globalsbynames(globals).hash_fn
	hash_fn = ffi.cast("uint32_t (*)(uint32_t)", hash_fn)

	local function code(key)
		local keep_around = buf
		return hash_fn(key)
	end

	return code, buf, size
end

return _M
