local ffi  = require "ffi"
local dasm = require "dasm"
local rgph = require "rgph"

-- Compat stuff
if not bit32 then bit32 = bit end
if not bit32 then bit32 = require "bit" end

local _M = {}

|.arch ARCH
|
|.if not X64
| .error invalid arch ARCH
|.endif
|
|.actionlist actions
|.section code, rodata
|.externnames externnames
|.globals globals
|.globalnames globalnames

local function const64(c, add)
	add = add or 0
	return (c[1] + add) + c[2] * 0x100000000ll
end

local function globalsbynames(globals)
	local res = {}
	for i = 0, #globalnames do
		res[globalnames[i]] = globals[i]
	end
	return res
end

local function build_graph(keys, flags, ntries, seed)
	flags  = flags or ""
	ntries = ntries or 100
	seed   = seed or 0

	local nkeys = rgph.count_keys(pairs(keys))
	local g = rgph.new_graph(nkeys, flags)

	for i = 1, ntries do
		local ok, err = g:build(seed, pairs(keys))
		if ok then break end
		assert(not err, err) -- pairs(keys) can't fail
		seed = seed + 1
	end

	return g
end

-- Call emit_rodata[g:algo()] to emit rdonly lookup table.
local emit_rodata = {}

function emit_rodata.bdz(Dst, g, assignments)
	local nverts = g:vertices()
	local rank = g:rank()
	local bits = rank - 1
	local stop = bit32.rshift(63, bits)

	local w = 0
	for v = 0, nverts - 1 do
		local n = bit32.band(v, stop)
		local a = assignments[v]
		if a == rank then a = 0 end
		a = bit32.lshift(a, n * bits)
		w = bit32.bor(w, a)
		if n == stop then
			| .dword w
			w = 0
		end
	end

	if bit32.band(nverts, stop) ~= 0 then
		| .dword w
	end
end

-- Call emit_hash[g:hash()] to emit hash body.
-- Input value is always in edi. For scalar hashes, output is
-- in ecx/rcx. Emitted code can use rax and rdx for temporaries.
local emit_hash = {}

-- Emit `fn(key) = rgph_u32_xxh32s_u32(key, g:seed())`.
function emit_hash.xxh32s(Dst, g, const)
	local mod = 2^32
	local len = 4

	| imul edi, edi, const.prime3
	| add  edi, (const.prime5 + len + g:seed()) % mod
	| rol  edi, 17
	| imul edi, edi, const.prime4
	| mov  ecx, edi
	| shr  ecx, 15
	| xor  ecx, edi
	| imul eax, ecx, const.prime2
	| mov  ecx, eax
	| shr  ecx, 13
	| xor  ecx, eax
	| imul eax, ecx, const.prime3
	| mov  ecx, eax
	| shr  ecx, 16
	| xor  ecx, eax
end

-- Emit `fn(key) = rgph_u64_xxh64s_u32(key, g:seed())`.
function emit_hash.xxh64s(Dst, g, const)
	local len = 4
	local c1 = const64(const.prime1)
	local c2 = const64(const.prime2)
	local c3 = const64(const.prime3)
	local c5 = const64(const.prime5, len + g:seed())

	| mov   edi, edi
	| mov64 rcx, c1
	| imul  rdi, rcx
	| mov64 rcx, c5
	| xor   rdi, rcx
	| rol   rdi, 23
	| mov64 rcx, c2
	| imul  rdi, rcx
	| mov64 rax, c3
	| lea   rdx, [rdi+rax]
	| mov   rsi, rdx
	| shr   rsi, 33
	| xor   rdx, rsi
	| imul  rdx, rcx
	| mov   rcx, rdx
	| shr   rcx, 29
	| xor   rdx, rcx
	| imul  rdx, rax
	| mov   rcx, rdx
	| shr   rcx, 32
	| xor   rcx, rdx
end

-- Call emit_rem[g:division_hint()] to emit remainders.
-- Input register is eax/rax. Remainders are loaded to
-- ecx, edi and (when rank is 3) to esi.
local emit_rem = {}

-- Emit remainders for a scalar hash when `g:vertices() / g:rank()`
-- is a power of 2.
function emit_rem.pow2(Dst, g, hash_bits)
	local nverts = g:vertices()
	local rank = g:rank()
	local div = nverts / rank
	local mask  = div - 1
	local rshift = math.floor(hash_bits / rank)

	| mov rdi, rcx
	| shr rdi, rshift

	if rank == 3 then
		| mov rsi, rcx
	end

	| and rcx, mask
	| and rdi, mask
	| add edi, div

	if rank == 3 then
		| shr rsi, hash_bits - rshift
		| and esi, mask
		| add esi, 2 * div
	end
end

-- Emit remainders for a scalar hash when `g:vertices() / g:rank()`
-- is a fastdiv value.
-- XXX gcc 5.3 generates faster code
function emit_rem.fastdiv(Dst, g, hash_bits)
	local nverts = g:vertices()
	local rank = g:rank()
	local div = nverts / rank
	local rshift = math.floor(hash_bits / rank)
	local mask  = rshift == 32 and 0xffffffff or bit32.lshift(1, rshift) - 1
	local fastdiv_bits = hash_bits >= 32 * rank and 32 or 31
	local magic, s1, s2, inc = rgph.fastdiv_prepare(div, fastdiv_bits)
	assert(s1 == 0 and not inc) -- fastdiv

	| mov r8d, magic

	if rank == 3 then
		| mov  rsi, rcx
		| shr  rsi, hash_bits - rshift
		| mov  eax, esi
		| mul  r8d
		| shr  edx, s2
		| imul edx, edx, div
		| sub  esi, edx
		| add  esi, 2 * div
	end

	| mov rdi, rcx
	| shr rdi, rshift

	if rank == 3 then
		| and edi, mask
	end

	| mov  eax, edi
	| mul  r8d
	| shr  edx, s2
	| imul edx, edx, div
	| sub  edi, edx
	| add  edi, div

	if rshift == 16 then
		| movzx ecx, cx
	elseif rshift ~= 32 then
		| and rcx, mask
	end

	| mov  eax, ecx
	| mul  r8d
	| shr  edx, s2
	| imul edx, edx, div
	| sub  ecx, edx
end

-- Call emit_lookup[g:algo()] to emit a lookup.
local emit_lookup = {}

-- XXX gcc 5.3 generates faster code
function emit_lookup.bdz(Dst, g)
	local rank = g:rank()

	| lea r11, [->rodata_start]

	if rank == 3 then
		| mov r10d, esi
		| shr r10d, 7 - rank
		| mov r10d, [r11+r10*4]
	end

	| mov r9d, edi
	| shr r9d, 7 - rank
	| mov r9d, [r11+r9*4]
	|
	| mov r8d, ecx
	| shr r8d, 7 - rank
	| mov r8d, [r11+r8*4]
	|
	| mov eax, ecx

	if rank == 2 then
		| shr r8d, cl -- implicit cl&31
		|
		| mov ecx, edi
		| shr r9d, cl -- implicit cl&31
	else
		| shl ecx, 1
		| shr r8d, cl -- implicit cl&31
		| and r8d, 3
		|
		| mov ecx, edi
		| shl ecx, 1
		| shr r9d, cl -- implicit cl&31
		| and r9d, 3
	end

	| add r8d, r9d

	if rank == 2 then
		| shr   r8d, 1 -- shift to CF
		| cmovb eax, edi
	else
		| add r8d, -3
		| adc r8d, -1
		| and r8d, 3
		|
		| mov ecx, esi
		| shl ecx, 1
		| shr r10d, cl -- implicit cl&31
		|
		| and r10d, 3
		| add r8d, r10d
		|
		| add r8d, -3
		| adc r8d, -1
		| and r8d, 3
		|
		| cmovne eax, edi
		| shr    r8d, 2 -- shift to CF
		| cmovb  eax, esi
	end
end

function _M.generate(keys, flags, ntries, seed)
	local g = build_graph(keys, flags, ntries, seed)

	local hash_bits = g:hash_bits()
	assert(hash_bits <= 64, "vector hashes aren't supported")

	local hint = g:division_hint()
	hint = hint == "" and "generic" or hint
	local emit_rem_fn = assert(emit_rem[hint], "unsupported divisor")

	local hash = g:hash()
	local emit_hash_fn = assert(emit_hash[hash], "unsupported hash")

	local algo = g:algo()
	local emit_lookup_fn = assert(emit_lookup[algo], "unsupported algo")
	local emit_rodata_fn = assert(emit_rodata[algo], "unsupported algo")

	local Dst, globals =
	    dasm.new(actions, externnames, DASM_MAXSECTION, DASM_MAXGLOBAL)

	| .align 32
	| .code
	|->hash_fn:
	emit_hash_fn(Dst, g, rgph.const[hash])
	emit_rem_fn(Dst, g, hash_bits)
	emit_lookup_fn(Dst, g)
	| ret
	| .align 32

	local assignments = g:assign()
	| .rodata
	| .align 4
	|->rodata_start:
	emit_rodata_fn(Dst, g, assignments)

	local buf, size = Dst:build()
	local hash_fn = globalsbynames(globals).hash_fn
	hash_fn = ffi.cast("uint32_t (*)(uint32_t)", hash_fn)

	local function code(key)
		local keep_around = buf
		return hash_fn(key)
	end

	return code, buf, size
end

return _M
